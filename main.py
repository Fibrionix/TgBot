import os
import telebot
from dotenv import load_dotenv

load_dotenv()
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
questions = [
    {
        "text": "1. –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –≤ –±–æ–ª—å—à–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π?",
        "options": ["–í –∫–æ–º–ø–∞–Ω–∏–∏", "–ù–∞–µ–¥–∏–Ω–µ"],
        "scores": {"–í –∫–æ–º–ø–∞–Ω–∏–∏": "E", "–ù–∞–µ–¥–∏–Ω–µ": "I"}
    },
    {
        "text": "2. –í—ã —á–∞—â–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤?",
        "options": ["–õ–æ–≥–∏–∫–∞", "–ß—É–≤—Å—Ç–≤–∞"],
        "scores": {"–õ–æ–≥–∏–∫–∞": "T", "–ß—É–≤—Å—Ç–≤–∞": "F"}
    },
    {
        "text": "3. –í—ã –ª—é–±–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –∑–∞—Ä–∞–Ω–µ–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ?",
        "options": ["–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "–°–ø–æ–Ω—Ç–∞–Ω–Ω–æ"],
        "scores": {"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å": "J", "–°–ø–æ–Ω—Ç–∞–Ω–Ω–æ": "P"}
    },
    {
        "text": "4. –í—ã –±–æ–ª—å—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É?",
        "options": ["–î–µ—Ç–∞–ª–∏", "–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"],
        "scores": {"–î–µ—Ç–∞–ª–∏": "S", "–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞": "N"}
    }
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ MBTI.\n\n"
                    "–û—Ç–≤–µ—Ç—å –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, –∏ —è —Å–∫–∞–∂—É, –∫—Ç–æ —Ç—ã!\n\n"
                    "–ù–∞–∂–º–∏ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç!",
                    reply_markup=markup)

@bot.message_handler(commands=['test'])
def start_test(message):
    user_id = message.from_user.id
    user_states[user_id] = {
        'current_question': 0,
        'answers': [],
        'personality': ''
    }
    ask_question(message, 0)

def ask_question(message, question_num):
    user_id = message.from_user.id
    
    if question_num < len(questions):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        user_states[user_id]['current_question'] = question_num
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        markup = telebot.types.ReplyKeyboardMarkup(
            resize_keyboard=True, 
            one_time_keyboard=True
        )
        
        for option in questions[question_num]["options"]:
            markup.add(option)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç")
        
        bot.send_message(
            message.chat.id, 
            questions[question_num]["text"],
            reply_markup=markup
        )
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        calculate_result(message)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
    if user_id not in user_states:
        handle_normal_message(message)
        return
    
    current_question_idx = user_states[user_id]['current_question']
    
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ
    if current_question_idx >= len(questions):
        handle_normal_message(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç":
        cancel_test(message)
        return
    
    current_question = questions[current_question_idx]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if message.text not in current_question["options"]:
        bot.send_message(message.chat.id, 
                        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user_states[user_id]['answers'].append(message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_idx = current_question_idx + 1
    ask_question(message, next_question_idx)

def handle_normal_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Ç–µ—Å—Ç–∞"""
    if message.text.lower() in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç!")
    else:
        bot.send_message(message.chat.id, 
                        "–Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏! üß†\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                        "/test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
                        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç")

def cancel_test(message):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, 
                    "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω. üòî\n"
                    "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ - –Ω–∞–∂–º–∏ /test",
                    reply_markup=markup)

def calculate_result(message):
    """–†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_id = message.from_user.id
    
    if user_id not in user_states:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /test")
        return
    
    answers = user_states[user_id]['answers']
    
    if len(answers) != len(questions):
        bot.send_message(message.chat.id, "–ù–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –æ—Ç–≤–µ—á–µ–Ω—ã. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /test")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
    personality = ""
    for i, answer in enumerate(answers):
        personality += questions[i]["scores"][answer]
    
    # –û–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏ (MBTI)
    type_descriptions = {
        "ISTJ": "üìä –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∞–ª–∏—Å—Ç",
        "ISFJ": "üõ°Ô∏è –ü—Ä–µ–¥–∞–Ω–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫", 
        "INFJ": "üí≠ –ì–ª—É–±–æ–∫–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å–æ–≤–µ—Ç—á–∏–∫",
        "INTJ": "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –Ω–æ–≤–∞—Ç–æ—Ä",
        "ISTP": "üîß –ü—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π –∏ —Å–º–µ–ª—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
        "ISFP": "üé® –ß—É—Ç–∫–∏–π –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫",
        "INFP": "üåü –ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –º–µ—á—Ç–∞—Ç–µ–ª—å",
        "INTP": "ü§î –õ–æ–≥–∏—á–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –º—ã—Å–ª–∏—Ç–µ–ª—å",
        "ESTP": "‚ö° –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π –¥–µ—è—Ç–µ–ª—å",
        "ESFP": "üé≠ –ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç",
        "ENFP": "üí´ –≠–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å",
        "ENTP": "üí° –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª–µ–º–∏—Å—Ç",
        "ESTJ": "üí™ –†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
        "ESFJ": "ü§ù –ó–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        "ENFJ": "üó£Ô∏è –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫",
        "ENTJ": "üëë –†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä"
    }
    
    description = type_descriptions.get(personality, "ü§î –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å!")
    
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id,
                    f"üéâ **–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:**\n\n"
                    f"**–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏:** {personality}\n"
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! ‚ú®\n"
                    f"–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑? /test",
                    parse_mode='Markdown',
                    reply_markup=markup)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]

@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    cancel_test(message)

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
                    "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**\n\n"
                    "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                    "/test - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏\n"
                    "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç\n"
                    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                    parse_mode='Markdown')

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ü§ñ")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ Ctrl+C")
    try:
        bot.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
